#+TITLE: MECH 421 Prelab 1
#+AUTHOR: Jasper Chan - 37467164

#+OPTIONS: toc:nil

#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{mathtools, nccmath}
#+LATEX_HEADER: \sisetup{per-mode=fraction}
#+LATEX_HEADER: \newcommand{\Lwrap}[1]{\left\{#1\right\}}
#+LATEX_HEADER: \newcommand{\Lagr}[1]{\mathcal{L}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Lagri}[1]{\mathcal{L}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztrans}[1]{\mathcal{Z}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztransi}[1]{\mathcal{Z}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\ZOH}[1]{\text{ZOH}\left(#1\right)}
#+LATEX_HEADER: \DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}
#+LATEX_HEADER: \makeatletter \AtBeginEnvironment{minted}{\dontdofcolorbox} \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}} \makeatother

#+LATEX_HEADER: \renewcommand\arraystretch{1.2}

#+begin_src elisp :session :exports none
(org-babel-tangle)
#+end_src

#+RESULTS:
| frac_fit.m |

#+begin_src ipython :session :results raw drawer :exports none
import numpy as np
import pandas as pd
import os
from matplotlib import pyplot as plt
from sympy import Symbol
from PySpice.Spice.Netlist import Circuit, SubCircuitFactory
from PySpice.Spice.Library import SpiceLibrary
from PySpice.Plot.BodeDiagram import bode_diagram
from IPython.display import set_matplotlib_formats
import shutil
%matplotlib inline
set_matplotlib_formats('svg')
#+end_src

#+RESULTS:
:results:
# Out[3]:
:end:

#+begin_src ipython :session :results raw drawer :exports none
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        if(isinstance(obj, list)):
            return None
        if(isinstance(obj, str)):
            return None
        if(isinstance(obj, pd.core.indexes.base.Index)):
            return None
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex=False)
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+end_src

#+RESULTS:
:results:
# Out[4]:
:end:

#+NAME: fig:lab_circuit
#+ATTR_LATEX: :width 0.6\textwidth
#+CAPTION: Circuit diagram of lab setup.
[[file:lab_circuit.svg]]

* Q1
Select the values of $Z_1$ and $Z_2$ such that the DC gain of the voltage stage is 11.

** Answer
The datasheet for the PA13 does not list an output impedance, only an input impedance (which is negligible in our case), hence I will assume that it has a negligible output impedance $R_o = 0$.

The typical open loop gain is given as $A = \SI{108}{\decibel}$

From Homework 2, Problem 2:
\begin{align*}
\frac{V_o}{V_r}
&= 
\frac{\overbrace{Z_1 + Z_2}^{Z}}{\cancelto{0}{R_o} + Z_1 + Z_2}\frac{V_a}{V_i} \\
&= 
A\frac{V_e}{V_i} \\
&=
A\frac{1}{V_i}
\left(V_i - V_o\frac{R_1}{R}\right) \\
&=
A
\left(1 - \frac{V_o}{V_r}\frac{R_1}{R}\right) \\
&=
A -
A\frac{V_o}{V_r}\frac{Z_1}{Z} \\
\frac{V_o}{V_r}
\left(1 + A\frac{Z_1}{Z}\right)
&= 
A \\
\frac{V_o}{V_i}
\frac{AZ_1 + Z}{Z}
&= 
A \\
\frac{V_o}{V_r}
AZ_1 + Z
&= 
AZ \\
\frac{V_o}{V_r}
&= 
\frac{AZ}
{AZ_1 + Z} \\
\frac{V_o}{V_r}
&=
\frac{A(Z_1 + Z_2)}
{AZ_1 + Z_1 + Z_2}
\end{align*}

Solving for $Z_1/Z_2$:
\begin{align*}
\frac{A(Z_1 + Z_2)}
{AZ_1 + Z_1 + Z_2}
&=
11 \\
AZ_1 + AZ_2
&=
Z_1(11(A + 1)) + 11Z_2 \\
Z_1(A - 11(A + 1))
&=
Z_2(11 - A) \\
-Z_1(10A + 11)
&=
Z_2(11 - A) \\
\frac{Z_1}{Z_2}
&=
-\frac{11 - A}{10A + 11} \\
\end{align*}

Plugging our values in:
#+begin_src ipython :session :results output code :exports both
A_db = 108  # dB
A = 10**(A_db/20)
Z_12 = -(11 - A)/(10*A + 11)
print(Z_12)
#+end_src

#+RESULTS:
#+begin_src ipython
0.09999518292433114
#+end_src

As expected for a non-inverting amplifier, $Z_2$ should be ten times greater than $Z_1$.
Let's pick
$Z_1 = \SI{10}{\kilo\ohm}$ and
$Z_2 = \SI{100}{\kilo\ohm}$.

We can also verify this with a SPICE simulation using PySpice.
First, let's define our amplifier:
#+begin_src ipython :session :results output code :exports both
class PA13Amplifier(SubCircuitFactory):
    __name__ = 'pa13_amplifier'
    __nodes__ = ('in+', 'out')
    def __init__(self, Z_1, Z_2, R_lim=0.2):
        super().__init__()

        # Supply rails
        self.V('s+', 'vs+', self.gnd, 24)
        self.V('s-', self.gnd, 'vs-', 24)

        # PA13
        self.X('1', 'PA13',
                'in+', 'in-', 'out',  # Inputs/outputs
                'vs+', 'vs-',  # Supply rails
                'cl+', 'cl-',  #  Current limit
                self.gnd)  # foldover

        # Current limiting resistors
        self.R('lim+', 'cl+', 'out', R_lim)
        self.R('lim-', 'cl-', 'out', R_lim)

        # Gain setting resistors
        self.R('z1', self.gnd, 'in-', Z_1)
        self.R('z2', 'in-', 'out', Z_2)
#+end_src

#+RESULTS:
#+begin_src ipython
#+end_src

Now we can run our simulation with a DC input:
#+begin_src ipython :session :results output code :exports both
V_in = 1  # V
Z_1 = 10*10**3  # ohm
Z_2 = 100*10**3  # ohm
shutil.copyfile('PA13.LIB', '/tmp/PA13.LIB')  # Hack to avoid spaces in filepath

circuit = Circuit('PA13 Amplifier')
circuit.include('/tmp/PA13.LIB')

circuit.subcircuit(PA13Amplifier(Z_1, Z_2))
circuit.X('1', 'pa13_amplifier', 'vr', 'vo')

# Input
circuit.V('input', 'vr', circuit.gnd, V_in)

simulator = circuit.simulator()
analysis = simulator.operating_point()
print(f"V_r: {float(analysis.nodes['vr'])} V")
print(f"V_o: {float(analysis.nodes['vo'])} V")
#+end_src

#+RESULTS:
#+begin_src ipython
V_r: 1.0 V
V_o: 10.979827608229467 V
#+end_src


* Q2
Based on the PA13 open-loop frequency response shown in Figure [[fig:freq_resp]], calculate the closed-loop bandwidth of the designed voltage stage.
Also, draw the Bode plot and expected step response of the closed-loop transfer function $V_o(s)/V_r(s)$.

#+ATTR_LATEX: :placement [H]
#+NAME: fig:freq_resp
#+CAPTION: Open-loop frequency response of PA13.
[[file:freq_resp.svg]]

** Answer
The phase plot shown in Figure [[fig:freq_resp]] looks like a system with multiple poles, whereas the gain plot looks like a single fractional integrator pole at about $\SI{100}{\hertz}$.
This suggests that the underlying transfer function is probably rather complicated and nonlinear.
However, if the phase plot does not significantly change due to the outside environment (i.e. resistor values, current draw, etc.), we can use a fractional integrator model shown below to find the bandwidth.
\begin{align}
A_\text{gain}(s) &= \frac{K}{s^{a} + b} & K, a, b \in \mathbb{R}
\end{align}

First, we must actually find the parameters $K$, $a$, and $b$ using the plot values extracted in Appendix [[apx:extract]].

Let's start by loading our data into MATLAB:
#+begin_src matlab :session :results output code :exports code
dat = readmatrix('gain_data.csv', 'NumHeaderLines', 1);
freq_hz = dat(:, 1);
gain_db = dat(:, 2);
freq_rad = 2*pi*freq_hz;
gain_abs = 10.^(gain_db./20);
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Using the FOMCON library to define our fitting function:
#+begin_src matlab :exports code :tangle frac_fit.m
function vals = frac_fit(x, omega)
    s = fotf('s');
    K = x(1);
    a = x(2);
    b = x(3);
    A = K/(s^a + b);
    [vals, ~] = bode(A, omega);
    % data is returned as 1x1xn matrix for some reason
    vals = reshape(vals, [numel(vals) 1]);
end
#+end_src

Now let's set an initial guess and fit our data:
#+begin_src matlab :session :results output code :exports code
b_0 = 2*pi*100;
K_0 = max(gain_abs)*b_0;
a_0 = 1.3;
x_0 = [K_0 a_0 b_0];
K_l = 4e8;
a_l = 1.2;
b_l = 2*pi*10;
x_l = [K_l a_l b_l];
K_h = 6e8;
a_h = 1.3;
b_h = 2*pi*1000;
x_h = [K_h a_h b_h];
% Weight by frequency to get more accurate exponent
cost = @(x)freq_rad.*(frac_fit(x, freq_rad) - gain_abs);

options = optimoptions('lsqnonlin');
options.MaxFunctionEvaluations = 1e3;
x = lsqnonlin(cost, x_0, x_l, x_h, options);
#+end_src

#+RESULTS:
#+begin_src matlab
Local minimum possible.
lsqnonlin stopped because the final change in the sum of squares relative to 
its initial value is less than the value of the function tolerance.
#+end_src

Creating our transfer function:
#+begin_src matlab :session :results output code :exports both
K = x(1);
a = x(2);
b = x(3);
s = fotf('s');
A_gain = K/(s^a + b)
#+end_src

#+RESULTS:
#+begin_src matlab
Fractional-order transfer function:
   5.5245e+08
-----------------
s^{1.2301}+2531.8
#+end_src

Plotting our function against our data to verify:
#+begin_src matlab :session :results file :exports both
f_name = 'fit_gain_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 300]);
[mag, ~] = bode(A_gain, freq_rad);
mag = reshape(mag, [numel(mag) 1]);
mag = 20*log10(mag);
semilogx(freq_hz, mag);
hold on;
semilogx(freq_hz, gain_db, '--');
hold off;
xlim([min(freq_hz), max(freq_hz)]);
ylim([-20, 120]);
fig.Renderer = 'painters';
l = legend('Fit', 'Raw Data');
set(l, 'color', 'none', 'edgecolor', 'none');
xlabel('Frequency [Hz]');
ylabel('Gain [dB]');
title('PA13 Open Loop Gain Response');
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:fit_gain_plot.svg]]

Now that we know our fit is representative of the data, we can find the closed loop bandwidth:
#+begin_src matlab :session :results output code :exports both
f = 1/11;
G_cl = A_gain/(1 + A_gain*f)
#+end_src

#+RESULTS:
#+begin_src matlab
Fractional-order transfer function:
     5.5245e+08s^{1.2301}+1.3987e+12
------------------------------------------
s^{2.4602}+5.0228e+07s^{1.2301}+1.2716e+11
#+end_src

Computing the frequency response and finding our \SI{-3}{\decibel} bandwidth:
#+begin_src matlab :session :results output code :exports both
fr = 2*pi*logspace(0, 7, 100000);
[mag, ~] = bode(G_cl, fr);
mag = reshape(mag, [numel(mag) 1]);
mag = 20*log10(mag);  % dB
dc_gain = mag(1)
bw_lim = dc_gain - 3;
[~, bw_idx] = min(abs(mag-bw_lim));
bw = fr(bw_idx)/(2*pi)  % Hz
#+end_src

#+RESULTS:
#+begin_src matlab
dc_gain =
   20.8274
bw =
   3.8385e+05
#+end_src

Plotting our results:
#+begin_src matlab :session :results file :exports both
f_name = 'cl_gain_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 300]);
[mag, ~] = bode(G_cl, freq_rad);
mag = reshape(mag, [numel(mag) 1]);
mag = 20*log10(mag);
semilogx(freq_hz, mag);
xline(bw);
xlim([min(freq_hz), max(freq_hz)]);
fig.Renderer = 'painters';
xlabel('Frequency [Hz]');
ylabel('Gain [dB]');
title('PA13 Closed Loop Gain Response');
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:cl_gain_plot.svg]]

Computing and plotting the step response:
#+begin_src matlab :session :results file :exports both
f_name = 'cl_step_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 300]);
step(G_cl);
xlim(1e-3*[-0.1 1])
ylim([0 13])
fig.Renderer = 'painters';
title('PA13 Closed Loop Step Response');
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:cl_step_plot.svg]]

Note that these results seem to somewhat correlate to simulation results from PySpice
#+begin_src ipython :session :results raw drawer :exports both
circuit = Circuit('PA13 Amplifier Bode')
circuit.include('/tmp/PA13.LIB')
circuit.subcircuit(PA13Amplifier(Z_1, Z_2))
circuit.X('1', 'pa13_amplifier', 'in+', 'vo')

# Input
circuit.SinusoidalVoltageSource(
    'input', 'in+', circuit.gnd, amplitude=0.1)

simulator = circuit.simulator()
analysis = simulator.ac(
    start_frequency=10**0,
    stop_frequency=10**7,
    number_of_points=100,
    variation='dec')
freq = analysis.frequency
gain = 20*np.log10(np.absolute(analysis.vo))
phase = np.angle(analysis.vo, deg=False)

idx = (np.abs(gain - (gain[0] - 3))).argmin()
bw = np.absolute(freq[idx])
figure, (ax1, ax2) = plt.subplots(2, figsize=(5, 5), sharex=True)
bode_diagram(axes=(ax1, ax2), frequency=freq, gain=gain, phase=phase)
ax1.vlines(bw.value, min(gain), max(gain), color='r')
ax2.vlines(bw.value, min(phase), max(phase), color='r')
bw
#+end_src

#+RESULTS:
:results:
# Out[64]:
: FrequencyValue(478630.09375 Hz)
[[file:./obipy-resources/B8iQRX.svg]]
:end:
As shown in the figure, the phase plot seems to be significantly different from what the datasheet shows.
The gain plot also shows some odd differences.
The open loop portion of the plot does not appear to match the datasheet, and the bandwidth is slightly different.

However, it should be noted that the simulation and fitted curves seem to have the same general shape.
This suggests that the simulation model provided by Apex Analaog is using a similar fractional order integrator, just with parameters that are different from what the datasheet suggests.

* Q3
Assuming
the motor winding resistance $R_m = \SI{3}{\ohm}$ and
the motor inductance is $L_m = \SI{1}{\milli\henry}$,
calculate the transfer function from the output voltage $V_o$ to the output current $I_o$ and the time constant.
Also, draw the Bode plot $I_o(s)/V_o(s)$
** Answer
The impedance of an inductor is:
\begin{equation*}
Z_L = Ls
\end{equation*}

For our circuit, the current through the motor is given by:
\begin{equation*}
I_o(s) &= \frac{V_o(s)}{R_s + R_m + Z_{L_m}}
\end{equation*}
The transfer function is then:
\begin{equation*}
\frac{I_o(s)}{V_o(s)} &= \frac{1}{R_s + R_m + L_m s}
\end{equation*}

Plugging in our values:
#+begin_src matlab :session :results output code :exports both
R_m = 3;  % ohm
L_m = 1e-3;  % H
R_s = 0.2; % ohm

I_V = 1/(R_s + R_m + L_m*s)
#+end_src

#+RESULTS:
#+begin_src matlab
Fractional-order transfer function:
    1
----------
0.001s+3.2
#+end_src

Plotting the Bode plot: 
#+begin_src matlab :session :results file :exports both
f_name = 'curr_bode_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 600]);
bode(I_V);
fig.Renderer = 'painters';
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:curr_bode_plot.svg]]

* Q4
Draw the Bode plot $V_{Io}(s)/V_r(s)$ and its step response
** Answer
From Ohm's Law:
\begin{align*}
V_{Io}(s) &= I_o(s)R_s \\
\frac{V_{Io}(s)}{V_r(s)} &= \frac{I_o(s)}{V_r(s)}R_s \\
\frac{V_{Io}(s)}{V_r(s)} &= \frac{I_o(s)}{V_o(s)}\frac{V_o(s)}{V_r(s)}R_s
\end{align*}


Plotting the Bode plot[fn:approx_phase]:
#+begin_src matlab :session :results file :exports both
f_name = 'mot_bode_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 600]);
V_io_r = I_V*G_cl*R_s;
bode(V_io_r, freq_rad);
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:mot_bode_plot.svg]]

Plotting the step response:
#+begin_src matlab :session :results file :exports both
f_name = 'mot_step_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 300]);
step(V_io_r, linspace(0, 5e-3));
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:mot_step_plot.svg]]

[fn:approx_phase] This plot will assume that the true transfer function of the PA13 is the fractional order integrator, therefore the phase will not match the datasheet.
If the phase plot based on the datasheet is desired, it's a simple matter of adding the phase plot from the datasheet with the phase plot of the motor windings.





\appendix
* Extracting the Gain Curve of the PA13
<<apx:extract>>
In order to extract precise data points from the datasheet, we first isolate the vector image of the curve from the datasheet PDF, making sure the image borders match the border of the graph.

#+ATTR_LATEX: :placement [H] :width 0.5\textwidth
#+CAPTION: Gain curve of the PA13 extracted from the datasheet.
[[file:gain_curve_datasheet.svg]]

Next, we convert the vector image to a bitmap for easier processing:
#+begin_src sh :exports both :eval never-export
inkscape --export-type="png" --export-dpi=600 gain_curve_datasheet.svg
#+end_src

#+RESULTS:

Now we can open the bitmap using Pillow to extract positional values at each pixel location.
#+begin_src ipython :session :eval never-export :results raw drawer :exports both
from PIL import Image
img = Image.open('gain_curve_datasheet.png')
raw_w, raw_h = img.size

# All pixels are black, so we're only interested in the alpha value
pixels = np.array(img.getdata(band=3))
pixels = pixels.reshape(raw_h, raw_w)

raw_y = []
for col in pixels.T:
    # Value at each point in column is weight, and index is position
    weighted = np.multiply(col, np.arange(len(col)))
    centroid = raw_h - np.sum(weighted)/np.sum(col)
    raw_y.append(centroid)
raw_y = np.array(raw_y)
raw_x = np.arange(raw_w)
#+end_src

#+RESULTS:
:results:
# Out[91]:
:end:

Now that we have our raw values, we can scale them back to match the values in the graph
#+begin_src ipython :session :eval never-export :results raw drawer :exports both
gain_min, gain_max = -20, 120  # dB
gain_range = gain_max - gain_min
f_min, f_max = 0, 7  # 10^n Hz
gain_db = raw_y/raw_h*gain_range + gain_min
f_hz = np.logspace(f_min, f_max, num=raw_w, base=10)
#+end_src

#+RESULTS:
:results:
# Out[134]:
:end:

We can plot the values to ensure that we've preserved the shape:
#+begin_src ipython :session :eval never-export :results raw drawer :ipyfile gain_pyplot.svg :exports both
plt.plot(f_hz, gain_db)
plt.xscale('log')
plt.xlim(10**f_min, 10**f_max)
plt.ylim(gain_min, gain_max)
plt.grid()
plt.xlabel("Frequency, F (Hz)")
plt.ylabel("Open Loop Gain, A (dB)")
plt.title("Small Signal Response")

# Hack to get plot aspect ratio to be square
ax = plt.gca()
fig  = plt.gcf()
fwidth = fig.get_figwidth()
fheight = fig.get_figheight()
bb = ax.get_position()
axwidth = fwidth * (bb.x1 - bb.x0)
axheight = fheight * (bb.y1 - bb.y0)
if axwidth > axheight:
    narrow_by = (axwidth - axheight) / fwidth
    bb.x0 += narrow_by / 2
    bb.x1 -= narrow_by / 2
elif axheight > axwidth:
    shrink_by = (axheight - axwidth) / fheight
    bb.y0 += shrink_by / 2
    bb.y1 -= shrink_by / 2

# Scale width to match datasheet
ratio = raw_w/raw_h
bbwidth = bb.x1 - bb.x0
largen_by = (ratio - 1)*bbwidth
bb.x0 -= largen_by / 2
bb.x1 += largen_by / 2

ax.set_position(bb)
_ = plt.xticks(np.logspace(f_min, f_max, num=f_max - f_min + 1, base=10))
#+end_src

#+RESULTS:
:results:
# Out[139]:
[[file:gain_pyplot.svg]]
:end:

Overlaying the original plot from the datasheet by hand, we see that the plots line up almost perfectly:
#+ATTR_LATEX: :placement [H]
#+CAPTION: Overlay of generated and datasheet PA13 gain curves
[[file:gain_pyplot_overlay.svg]]

With this, we can be reasonably sure that the extracted data faithfully reproduces the original curve, and we can save the data for processing:
#+begin_src ipython :session :eval never-export :results raw drawer :exports both
df = pd.DataFrame(
    data={
        'Freq (Hz)': f_hz,
        'Gain (dB)': gain_db})
df.to_csv('gain_data.csv', index=False)
#+end_src

#+RESULTS:
:results:
# Out[140]:
:end:

