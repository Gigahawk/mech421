#+TITLE: MECH 421 Lab 3
#+AUTHOR: Jasper Chan - 37467164

#+OPTIONS: toc:nil

#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{mathtools, nccmath}
#+LATEX_HEADER: \sisetup{per-mode=fraction}
#+LATEX_HEADER: \newcommand{\Lwrap}[1]{\left\{#1\right\}}
#+LATEX_HEADER: \newcommand{\Lagr}[1]{\mathcal{L}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Lagri}[1]{\mathcal{L}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztrans}[1]{\mathcal{Z}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztransi}[1]{\mathcal{Z}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\ZOH}[1]{\text{ZOH}\left(#1\right)}
#+LATEX_HEADER: \DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}
#+LATEX_HEADER: \makeatletter \AtBeginEnvironment{minted}{\dontdofcolorbox} \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}} \makeatother

#+LATEX_HEADER: \renewcommand\arraystretch{1.2}

#+begin_src ipython :session :results raw drawer :exports none
import numpy as np
import pandas as pd
import os
from matplotlib import pyplot as plt
from sympy import Symbol
from PySpice.Spice.Netlist import Circuit, SubCircuitFactory
from PySpice.Spice.Library import SpiceLibrary
from PySpice.Plot.BodeDiagram import bode_diagram
from IPython.display import set_matplotlib_formats
from scipy import signal, optimize
import shutil
import tempfile
%matplotlib inline
set_matplotlib_formats('svg')
import PySpice.Logging.Logging as Logging
logger = Logging.setup_logging(logging_level='DEBUG')
#+end_src

#+RESULTS:
:results:
# Out[1]:
:end:

#+begin_src ipython :session :results raw drawer :exports none
# Janky monkeypatch hack
from PySpice.Spice.NgSpice.Shared import NgSpiceShared
def exec_command(self, command, join_lines=True):

        """ Execute a command and return the output. """

        if len(command) > self.__MAX_COMMAND_LENGTH__:
            raise ValueError('Command must not exceed {} characters'.format(self.__MAX_COMMAND_LENGTH__))

        self._logger.debug('Execute command: {}'.format(command))
        self.clear_output()
        rc = self._ngspice_shared.ngSpice_Command(command.encode('ascii'))
        if rc:
            raise NameError("ngSpice_Command '{}' returned {}".format(command, rc))
        if join_lines:
            return self.stdout
        else:
            return self._stdout
NgSpiceShared.exec_command = exec_command

#+end_src

#+RESULTS:
:results:
# Out[2]:
:end:

#+begin_src ipython :session :results raw drawer :exports none
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        if(isinstance(obj, list)):
            return None
        if(isinstance(obj, str)):
            return None
        if(isinstance(obj, pd.core.indexes.base.Index)):
            return None
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex=False)
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+end_src

#+RESULTS:
:results:
# Out[3]:
:end:

* Measuring the Frequency Response of the Plant
We have been asked to find the frequency response of the plant by first linearizing it, so let's do that.
#+begin_src matlab :session :results output code :exports both
% Capture delay blocks in model
opt = linearizeOptions('UseExactDelayModel', 'on');
plant = linearize('Lab3_PlantModel', opt);
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

We expect the phase to drop off significantly due to the delay block in the system.
Let's verify this with a Bode plot:
#+begin_src matlab :session :results file :exports both
f_name = 'plant_bode.svg';
fig = figure('visible', 'off',...
            'Position', [0 0 600 600]);
bodeopts = bodeoptions();
% Wrap phase to +-180 degrees
bodeopts.PhaseWrapping = 'on';
bodeopts.Grid = 'on'
bode(plant, bodeopts);
saveas(fig, f_name);
ans = f_name;
#+end_src

#+RESULTS:
[[file:plant_bode.svg]]

* Controller Design
From the lab manual, we want a controller with:
- Phase margin $\phi_m > \SI{60}{\degree}$
- As high a crossover frequency as possible
- Zero steady-state error for a step position reference $r$

Unfortunately, it looks like the dip in the phase plot at around $\SI{300}{\radian\per\second}$ will prevent us from taking full advantage of the phase peak at about $\SI{500}{\radian\per\second}$.
We would have to place the crossover point at nearly $\SI{2000}{\radian\per\second}$, which would require multiple compensators to provide enough phase margin, which would significantly increase high frequency gain.
Instead, in order to avoid having multiple crossover points, let's place the crossover frequency at $\SI{150}{\radian\per\second}$[fn:gainmargin]

[fn:gainmargin] Note that this will leave us with very little gain margin.
Because the lab report does not specify a minimum gain margin and we are working with a simulated system, this is of little concern.






Implementing the lead compensator:
#+begin_src matlab :session :results output code :exports both
s = tf('s');
omega_c = 140; % rad/s
phi_max = deg2rad(80);  % rad
alpha = (1 + sin(phi_max))/(1 - sin(phi_max))
tau = 1/(omega_c*sqrt(alpha))
G_lead = (alpha*tau*s + 1)/(tau*s + 1)
#+end_src

#+RESULTS:
#+begin_src matlab
alpha =
  130.6461
tau =
   6.2492e-04
G_lead =
 
   0.08164 s + 1
  ---------------
  0.0006249 s + 1
 
Continuous-time transfer function.
#+end_src

Finding the proportional gain $K_p$ to shift the plant gain curve to have the desired crossover frequency:
#+begin_src matlab :session :results output code :exports both
% Extra gain at omega_c
[gain_lead, ~, ~] = bode(G_lead, omega_c)
% Current loop gain at omega_c
[gain_loop, ~, ~] = bode(plant, omega_c)
K_p = 1/(gain_lead*gain_loop)
#+end_src

#+RESULTS:
#+begin_src matlab
gain_lead =
   11.4301
gain_loop =
    0.0019
K_p =
   45.5659
#+end_src

Checking that our compensator correctly moves the loop:
#+begin_src matlab :session :results file :exports both
f_name = 'plant_bode_zoomed_comp1.svg';
fig = figure('visible', 'off',...
            'Position', [0 0 600 600]);
h = bodeplot(K_p*G_lead*plant, bodeopts);
h.showCharacteristic('MinimumStabilityMargins')
saveas(fig, f_name);
ans = f_name;
#+end_src

#+RESULTS:
[[file:plant_bode_zoomed_comp1.svg]]

Implementing an integrator to remove steady state error:
#+begin_src matlab :session :results output code :exports both
omega_i = omega_c/10;  % rad/s
T_i = 1/omega_i;
% This should have a limited output range when implemented in Simulink
G_int = 1/(T_i*s)
G_pi = K_p*(1 + G_int)
#+end_src

#+RESULTS:
#+begin_src matlab
G_int =
 
      1
  ---------
  0.07143 s
 
Continuous-time transfer function.
G_pi =
 
  3.255 s + 45.57
  ---------------
     0.07143 s
 
Continuous-time transfer function.
#+end_src

Implementing a low pass filter to further supress high frequency noise:
#+begin_src matlab :session :results output code :exports both
omega_f = omega_c*10;  % rad/s
G_lpf = 1/(s/omega_f + 1)
#+end_src

#+RESULTS:
#+begin_src matlab
G_lpf =
 
    1400
  --------
  s + 1400
 
Continuous-time transfer function.
#+end_src

* Controller Verification
Let's verify that our loop still meets our requirements:
#+begin_src matlab :session :results output code :exports both
[~,pm,~,wc] = margin(G_pi*G_lead*G_lpf*plant)
#+end_src

#+RESULTS:
#+begin_src matlab
pm =
   63.8270
wc =
  139.9773
#+end_src

#+begin_src matlab :session :results file :exports both
f_name = 'plant_bode_zoomed_comp2.svg';
fig = figure('visible', 'off',...
            'Position', [0 0 600 600]);
h = bodeplot(G_pi*G_lead*G_lpf*plant, bodeopts);
h.showCharacteristic('MinimumStabilityMargins')
saveas(fig, f_name);
ans = f_name;
#+end_src

#+RESULTS:
[[file:plant_bode_zoomed_comp2.svg]]

We can see that the loop still meets all of our requirements.

* Measuring Step Response
Creating a Simulink model with our controller:
#+begin_src matlab :session :results none :exports none :eval never-export
simulink
#+end_src
#+begin_src matlab :session :results none :exports code
% dummy value so that system loads properly
int_lim = 1;
r_step = 1;
open_system('G_complete');
print -dsvg -s 'G_complete.svg';
#+end_src
#+begin_src shell :exports results :results file
inkscape G_complete.svg --export-text-to-path --export-plain-svg -o G_complete_fixed.svg
printf 'G_complete_fixed.svg'
#+end_src

#+RESULTS:
[[file:G_complete_fixed.svg]]

The lab manual asks for 3 values of $x_\text{ref}$, but we can do better.
In order to find the corresponding loop inputs $r$, we multiply by $H$:
#+begin_src matlab :session :results output code :exports both
H = 0.0035;  % from prelab
% Emperically chosen to highlight saturation point
x_steps = [1 5 10 11.25 12.5 18.75 25 50 75 100]; % mm
r_steps = H*x_steps;
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Simulating our step responses with the integrator saturation limit enabled:
#+begin_src matlab :session :results output code :exports both :eval never-export
lim_step_resps = [];
% Empiracally tuned to limit overshoot to about 20%
int_lim = 2;  
for i = 1:size(r_steps, 2)
    r_step = r_steps(i);
    lim_step_resps = [lim_step_resps, sim('G_complete', 2)];
end
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Simulating our step responses without the integrator saturation limit:
#+begin_src matlab :session :results output code :exports both :eval never-export
no_lim_step_resps = [];
int_lim = inf; 
for i = 1:size(r_steps, 2)
    r_step = r_steps(i);
    no_lim_step_resps = [no_lim_step_resps, sim('G_complete', 2)];
end
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Calculating the step response characteristics of the integrator limited output:
#+begin_src matlab :session :results output code :exports both
lim_step_infos = [];
lim_rise_times = [];
lim_overshoots = [];

for i = 1:size(r_steps, 2)
    r_step = r_steps(i);
    resp = lim_step_resps(i);
    t = resp.y.Time;
    y = resp.y.Data;
    si = stepinfo(y, t, r_step);
    lim_step_infos = [lim_step_infos, si];
    lim_rise_times = [lim_rise_times si.RiseTime];
    lim_overshoots = [lim_overshoots si.Overshoot];
end
#+end_src 

#+RESULTS:
#+begin_src matlab
#+end_src

Calculating the step response characteristics of the integrator limitless output:
#+begin_src matlab :session :results output code :exports both
no_lim_step_infos = [];
no_lim_rise_times = [];
no_lim_overshoots = [];
for i = 1:size(r_steps, 2)
    r_step = r_steps(i);
    resp = no_lim_step_resps(i);
    t = resp.y.Time;
    y = resp.y.Data;
    si = stepinfo(y, t, r_step);
    no_lim_step_infos = [no_lim_step_infos, si];
    no_lim_rise_times = [no_lim_rise_times si.RiseTime];
    no_lim_overshoots = [no_lim_overshoots si.Overshoot];
end
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Displaying the results:
#+begin_src matlab :session :results output code :exports both
tbl_lim = array2table(...
    [x_steps; r_steps; lim_rise_times; lim_overshoots;]',...
    'VariableNames', ...
    {'x_ref [mm]', 'Step Height', ...
     'Rise Time [s]', 'Overshoot [pct]'})

tbl_no_lim = array2table(...
    [x_steps; r_steps; no_lim_rise_times; no_lim_overshoots;]',...
    'VariableNames', ...
    {'x_ref [mm]', 'Step Height', ...
     'Rise Time [s]', 'Overshoot [pct]'})
#+end_src

#+RESULTS:
#+begin_src matlab
tbl_lim =
  10x4 table
    x_ref [mm]    Step Height    Rise Time [s]    Overshoot [pct]
    __________    ___________    _____________    _______________
          1          0.0035        0.049646           13.463     
          5          0.0175        0.047145           17.219     
         10           0.035          0.0481           20.919     
      11.25        0.039375        0.048729           21.824     
       12.5         0.04375        0.049471           22.721     
      18.75        0.065625        0.059444           24.261     
         25          0.0875        0.076619           18.195     
         50           0.175         0.11349           9.0975     
         75          0.2625         0.14078            6.065     
        100            0.35         0.16397           4.5488     
tbl_no_lim =
  10x4 table
    x_ref [mm]    Step Height    Rise Time [s]    Overshoot [pct]
    __________    ___________    _____________    _______________
          1          0.0035        0.049646           13.463     
          5          0.0175        0.047145           17.219     
         10           0.035          0.0481           20.919     
      11.25        0.039375        0.048729           21.824     
       12.5         0.04375        0.049471           22.721     
      18.75        0.065625        0.054601           27.073     
         25          0.0875        0.061368           31.195     
         50           0.175         0.09097           52.998     
         75          0.2625         0.11703           68.901     
        100            0.35         0.14099           78.294
#+end_src

There are some interesting patterns in the data, let's plot these values against $x_\text{ref}$:
#+begin_src matlab :session :results file :exports both
f_name = 'step_results.svg';
fig = figure('visible', 'off',...
            'Position', [0 0 600 600]);
subplot(2, 1, 1);
loglog(x_steps, no_lim_rise_times, '-o');
hold on;
loglog(x_steps, lim_rise_times, '-o');
title('Step Info vs Step Size');
ylabel('Rise Time [s]');
l = legend('No Limit', 'Integrator Limited')
set(...
    l, 'color', 'none', 'edgecolor', 'none',...
    'Location', 'NorthWest');
subplot(2, 1, 2);
loglog(x_steps, no_lim_overshoots, '-o');
hold on;
loglog(x_steps, lim_overshoots, '-o');
ylabel('Overshoot [pct]');
xlabel('Step Size [mm]');
saveas(fig, f_name);
ans = f_name;
#+end_src

#+RESULTS:
[[file:step_results.svg]]

We can see that for small steps below about $\SI{11}{\milli\meter}$, the system has a fairly consistent rise time of about $\SI{0.05}{\second}$.
For higher step inputs, we see that the rise times start increasing, indicating that the plant has hit some saturation limit.
When not the integrator is not limited, the overshoot rises with the step input about linearly.
Limiting the integrator output significantly improves the overshoot, with a slight increase in rise time when the system saturates compared to not using a limit.

Plotting normalized step responses for comparison:
#+begin_src matlab :session :results file :exports both
f_name = 'norm_steps.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 800]);
colors = turbo(10);
legends = {};
subplot(3, 1, 1);
for i = 1:size(r_steps, 2)
    x_step = x_steps(i);
    r_step = r_steps(i);
    resp = no_lim_step_resps(i);
    t = resp.y.Time;
    y = resp.y.Data;
    plot(t, y/r_step, 'Color', colors(i,:));
    legends{i} = sprintf('x: %.1f mm', x_step);
    hold on;
end
title('Step response without integrator limit');
xlim([0, 1])
ylabel('Normalized output');
subplot(3, 1, 2);
for i = 1:size(r_steps, 2)
    x_step = x_steps(i);
    r_step = r_steps(i);
    resp = lim_step_resps(i);
    t = resp.y.Time;
    y = resp.y.Data;
    plot(t, y/r_step, 'Color', colors(i,:));
    hold on;
end
title('Step response with integrator limit');
xlim([0, 1])
ylabel('Normalized output');
xlabel('Time [s]');
l = legend(legends)
set(...
    l, 'color', 'none', 'edgecolor', 'none',...
    'NumColumns', 4, 'Units', 'normalized',...
    'Position', [0.4 0.15 0.2 0.2]);
saveas(fig, f_name);
ans = f_name;
#+end_src

#+RESULTS:
[[file:norm_steps.svg]]

